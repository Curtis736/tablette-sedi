from flask import Flask, jsonify
from flask_cors import CORS
import pyodbc
import os
from config import DB_CONFIG, FLASK_CONFIG, ERROR_MESSAGES, APP_TABLES, FALLBACK_TABLES, SIMULATION_MODE
import sys, io
try:
    sys.stdout.reconfigure(encoding='utf-8', errors='replace')
    sys.stderr.reconfigure(encoding='utf-8', errors='replace')
except Exception:
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

app = Flask(__name__)
CORS(app)

# Variable globale pour d√©terminer quelle base utiliser
CURRENT_TABLES = APP_TABLES
USING_FALLBACK = False
USING_SIMULATION = False

# Stockage temporaire pour la simulation
SIMULATION_DATA = {
    'temps_travail': [],
    'historique': [],
    'sessions': []
}

def get_db_connection():
    """Cr√©e une connexion √† la base de donn√©es SQL Server"""
    try:
        conn_str = (
            f"DRIVER={DB_CONFIG['driver']};"
            f"SERVER={DB_CONFIG['server']};"
            f"DATABASE={DB_CONFIG['database']};"
            f"UID={DB_CONFIG['username']};"
            f"PWD={DB_CONFIG['password']};"
            f"TrustServerCertificate={DB_CONFIG['trust_server_certificate']};"
            f"Encrypt={DB_CONFIG['encrypt']};"
        )
        conn = pyodbc.connect(conn_str)
        return conn
    except Exception as e:
        print(f"Erreur de connexion √† la base de donn√©es: {e}")
        return None

def get_app_db_connection():
    """Cr√©e une connexion √† la base de donn√©es de l'application"""
    try:
        conn_str = (
            f"DRIVER={DB_CONFIG['driver']};"
            f"SERVER={DB_CONFIG['server']};"
            f"DATABASE={DB_CONFIG['database_app']};"
            f"UID={DB_CONFIG['username']};"
            f"PWD={DB_CONFIG['password']};"
            f"TrustServerCertificate={DB_CONFIG['trust_server_certificate']};"
            f"Encrypt={DB_CONFIG['encrypt']};"
        )
        conn = pyodbc.connect(conn_str)
        return conn
    except Exception as e:
        print(f"Erreur de connexion √† la base de donn√©es de l'application: {e}")
        return None

def get_fallback_db_connection():
    """Cr√©e une connexion √† la base de donn√©es de fallback"""
    try:
        conn_str = (
            f"DRIVER={DB_CONFIG['driver']};"
            f"SERVER={DB_CONFIG['server']};"
            f"DATABASE={DB_CONFIG['database_fallback']};"
            f"UID={DB_CONFIG['username']};"
            f"PWD={DB_CONFIG['password']};"
            f"TrustServerCertificate={DB_CONFIG['trust_server_certificate']};"
            f"Encrypt={DB_CONFIG['encrypt']};"
        )
        conn = pyodbc.connect(conn_str)
        return conn
    except Exception as e:
        print(f"Erreur de connexion √† la base de donn√©es de fallback: {e}")
        return None

def determine_working_database():
    """D√©termine quelle base de donn√©es utiliser"""
    global CURRENT_TABLES, USING_FALLBACK, USING_SIMULATION
    
    # Si le mode simulation est activ√©, l'utiliser
    if SIMULATION_MODE:
        USING_SIMULATION = True
        print("üé≠ Mode simulation activ√© - Donn√©es stock√©es en m√©moire")
        return True
    
    # Essayer d'abord SEDI_APP
    conn = get_app_db_connection()
    if conn:
        conn.close()
        CURRENT_TABLES = APP_TABLES
        USING_FALLBACK = False
        USING_SIMULATION = False
        print("‚úÖ Utilisation de la base SEDI_APP")
        return True
    
    # Fallback vers SEDI_ERP
    conn = get_fallback_db_connection()
    if conn:
        conn.close()
        CURRENT_TABLES = FALLBACK_TABLES
        USING_FALLBACK = True
        USING_SIMULATION = False
        print("‚ö†Ô∏è Utilisation de la base SEDI_ERP (fallback)")
        return True
    
    # Si aucune base n'est accessible, utiliser la simulation
    USING_SIMULATION = True
    print("üé≠ Aucune base accessible - Mode simulation activ√©")
    return True

def create_app_database():
    """Cr√©e la base de donn√©es SEDI_APP si elle n'existe pas"""
    try:
        # Connexion √† master pour cr√©er la base
        conn_str = (
            f"DRIVER={DB_CONFIG['driver']};"
            f"SERVER={DB_CONFIG['server']};"
            f"DATABASE=master;"
            f"UID={DB_CONFIG['username']};"
            f"PWD={DB_CONFIG['password']};"
            f"TrustServerCertificate={DB_CONFIG['trust_server_certificate']};"
            f"Encrypt={DB_CONFIG['encrypt']};"
        )
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()
        
        # V√©rifier si la base existe d√©j√†
        check_db_query = f"SELECT name FROM sys.databases WHERE name = '{DB_CONFIG['database_app']}'"
        cursor.execute(check_db_query)
        db_exists = cursor.fetchone()
        
        if not db_exists:
            # Cr√©ation de la base de donn√©es (sans transaction)
            create_db_query = f"CREATE DATABASE [{DB_CONFIG['database_app']}]"
            cursor.execute(create_db_query)
            conn.commit()
            print(f"‚úÖ Base de donn√©es {DB_CONFIG['database_app']} cr√©√©e")
        else:
            print(f"‚úÖ Base de donn√©es {DB_CONFIG['database_app']} existe d√©j√†")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
        return False

def create_app_tables():
    """Cr√©e les tables de l'application"""
    global USING_SIMULATION
    
    try:
        # Si en mode simulation, pas besoin de cr√©er des tables
        if USING_SIMULATION:
            print("üé≠ Mode simulation - Pas de cr√©ation de tables n√©cessaire")
            return True
        
        # Attendre un peu que la base soit cr√©√©e
        import time
        time.sleep(2)
        
        # D√©terminer quelle base utiliser
        if not determine_working_database():
            return False
        
        # Utiliser la connexion appropri√©e
        if USING_FALLBACK:
            conn = get_fallback_db_connection()
        else:
            conn = get_app_db_connection()
            
        if not conn:
            print("‚ùå Impossible de se connecter pour cr√©er les tables")
            return False
        
        cursor = conn.cursor()
        
        # Table ABTEMPS_OPERATEURS (temps de travail en cours)
        create_temps_table = f"""
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{CURRENT_TABLES['temps_travail']}') AND type in (N'U'))
        CREATE TABLE {CURRENT_TABLES['temps_travail']} (
            NoEnreg INT IDENTITY(1,1) PRIMARY KEY,
            Ident NVARCHAR(50) NOT NULL,
            DateTravail DATETIME NOT NULL,
            CodeLanctImprod NVARCHAR(50) NOT NULL,
            Phase NVARCHAR(50) NOT NULL,
            CodeRubrique NVARCHAR(50),
            VarNumUtil8 INT DEFAULT 0, -- Minutes
            VarNumUtil9 INT DEFAULT 0, -- Secondes
            Statut NVARCHAR(20) DEFAULT 'EN_COURS',
            DateCreation DATETIME DEFAULT GETDATE()
        )
        """
        
        # Table ABHISTORIQUE_OPERATEURS (historique complet)
        create_historique_table = f"""
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{CURRENT_TABLES['historique']}') AND type in (N'U'))
        CREATE TABLE {CURRENT_TABLES['historique']} (
            NoEnreg INT IDENTITY(1,1) PRIMARY KEY,
            Ident NVARCHAR(50) NOT NULL,
            DateTravail DATETIME NOT NULL,
            CodeLanctImprod NVARCHAR(50) NOT NULL,
            Phase NVARCHAR(50) NOT NULL,
            CodeRubrique NVARCHAR(50),
            VarNumUtil8 INT DEFAULT 0, -- Minutes
            VarNumUtil9 INT DEFAULT 0, -- Secondes
            Statut NVARCHAR(20) DEFAULT 'TERMINE',
            DateCreation DATETIME DEFAULT GETDATE()
        )
        """
        
        # Table ABSESSIONS_OPERATEURS (sessions de travail)
        create_sessions_table = f"""
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{CURRENT_TABLES['sessions']}') AND type in (N'U'))
        CREATE TABLE {CURRENT_TABLES['sessions']} (
            NoEnreg INT IDENTITY(1,1) PRIMARY KEY,
            Ident NVARCHAR(50) NOT NULL,
            DateDebut DATETIME NOT NULL,
            DateFin DATETIME,
            CodeLanctImprod NVARCHAR(50) NOT NULL,
            Phase NVARCHAR(50) NOT NULL,
            CodeRubrique NVARCHAR(50),
            Statut NVARCHAR(20) DEFAULT 'ACTIVE',
            DateCreation DATETIME DEFAULT GETDATE()
        )
        """
        
        # Ex√©cution des cr√©ations une par une
        tables_created = 0
        try:
            cursor.execute(create_temps_table)
            print("‚úÖ Table ABTEMPS_OPERATEURS cr√©√©e")
            tables_created += 1
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur cr√©ation table ABTEMPS_OPERATEURS: {e}")
        
        try:
            cursor.execute(create_historique_table)
            print("‚úÖ Table ABHISTORIQUE_OPERATEURS cr√©√©e")
            tables_created += 1
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur cr√©ation table ABHISTORIQUE_OPERATEURS: {e}")
        
        try:
            cursor.execute(create_sessions_table)
            print("‚úÖ Table ABSESSIONS_OPERATEURS cr√©√©e")
            tables_created += 1
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur cr√©ation table ABSESSIONS_OPERATEURS: {e}")
        
        conn.commit()
        conn.close()
        
        if tables_created > 0:
            print(f"‚úÖ {tables_created} tables de l'application cr√©√©es avec succ√®s")
            return True
        else:
            print("‚ö†Ô∏è Aucune table n'a pu √™tre cr√©√©e - Passage en mode simulation")
            USING_SIMULATION = True
            return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False

def ensure_tables_exist():
    """V√©rifie et cr√©e les tables si elles n'existent pas"""
    try:
        # Si en mode simulation, pas besoin de v√©rifier les tables
        if USING_SIMULATION:
            return True
        
        # D√©terminer quelle base utiliser
        if not determine_working_database():
            return False
        
        # Utiliser la connexion appropri√©e
        if USING_FALLBACK:
            conn = get_fallback_db_connection()
        else:
            conn = get_app_db_connection()
            
        if not conn:
            return False
        
        cursor = conn.cursor()
        
        # V√©rifier si les tables existent
        tables_to_check = [
            CURRENT_TABLES['temps_travail'],
            CURRENT_TABLES['historique'],
            CURRENT_TABLES['sessions']
        ]
        
        missing_tables = []
        for table in tables_to_check:
            try:
                cursor.execute(f"SELECT TOP 1 * FROM {table}")
            except Exception:
                missing_tables.append(table)
        
        if missing_tables:
            print(f"‚ö†Ô∏è Tables manquantes d√©tect√©es: {missing_tables}")
            # Cr√©er les tables manquantes
            return create_app_tables()
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des tables: {e}")
        return False

def test_connection():
    """Teste la connexion √† la base de donn√©es"""
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            conn.close()
            return True
        except Exception as e:
            print(f"Erreur lors du test de connexion: {e}")
            return False
    return False

def export_data_to_erp():
    """Exporte les donn√©es de SEDI_APP_INDEPENDANTE vers l'ERP SILOG"""
    try:
        # Connexion √† la base autonome
        conn_app = get_app_db_connection()
        if not conn_app:
            print("‚ùå Impossible de se connecter √† la base autonome")
            return False
        
        cursor_app = conn_app.cursor()
        
        # R√©cup√©rer toutes les donn√©es de l'historique
        query_historique = f"""
        SELECT 
            NoEnreg, Ident, DateTravail, CodeLanctImprod, Phase, CodeRubrique,
            VarNumUtil8, VarNumUtil9, Statut, DateCreation
        FROM {APP_TABLES['historique']}
        ORDER BY DateCreation
        """
        
        cursor_app.execute(query_historique)
        historique_data = cursor_app.fetchall()
        
        print(f"üìä {len(historique_data)} enregistrements trouv√©s dans la base autonome")
        
        # Connexion √† l'ERP pour l'export
        conn_erp = get_db_connection()
        if not conn_erp:
            print("‚ùå Impossible de se connecter √† l'ERP")
            conn_app.close()
            return False
        
        cursor_erp = conn_erp.cursor()
        
        # Cr√©er une table temporaire dans l'ERP pour l'import
        create_temp_table = """
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[SEDI_ERP].[dbo].[TEMP_IMPORT_APP]') AND type in (N'U'))
        CREATE TABLE [SEDI_ERP].[dbo].[TEMP_IMPORT_APP] (
            NoEnreg INT,
            Ident NVARCHAR(50),
            DateTravail DATETIME,
            CodeLanctImprod NVARCHAR(50),
            Phase NVARCHAR(50),
            CodeRubrique NVARCHAR(50),
            VarNumUtil8 INT,
            VarNumUtil9 INT,
            Statut NVARCHAR(20),
            DateCreation DATETIME
        )
        """
        
        cursor_erp.execute(create_temp_table)
        conn_erp.commit()
        
        # Ins√©rer les donn√©es dans la table temporaire
        insert_query = """
        INSERT INTO [SEDI_ERP].[dbo].[TEMP_IMPORT_APP] 
        (NoEnreg, Ident, DateTravail, CodeLanctImprod, Phase, CodeRubrique, VarNumUtil8, VarNumUtil9, Statut, DateCreation)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        for row in historique_data:
            cursor_erp.execute(insert_query, row)
        
        conn_erp.commit()
        conn_app.close()
        conn_erp.close()
        
        print(f"‚úÖ {len(historique_data)} enregistrements export√©s vers [SEDI_ERP].[dbo].[TEMP_IMPORT_APP]")
        print("üìã Vous pouvez maintenant traiter ces donn√©es dans l'ERP SILOG")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export: {e}")
        return False

def get_database_stats():
    """Affiche les statistiques de la base de donn√©es autonome"""
    try:
        conn = get_app_db_connection()
        if not conn:
            return None
        
        cursor = conn.cursor()
        
        # Compter les enregistrements dans chaque table
        stats = {}
        
        for table_name, table_path in APP_TABLES.items():
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table_path}")
                count = cursor.fetchone()[0]
                stats[table_name] = count
            except Exception as e:
                stats[table_name] = f"Erreur: {e}"
        
        conn.close()
        return stats
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {e}")
        return None

@app.route('/api/operateurs', methods=['GET'])
def get_operateurs():
    """R√©cup√®re tous les op√©rateurs selon la requ√™te sp√©cifi√©e"""
    try:
        conn = get_db_connection()
        if not conn:
            return jsonify({'error': 'Impossible de se connecter √† la base de donn√©es', 'success': False}), 500
        
        cursor = conn.cursor()
        
        # Requ√™te directe dans SEDI_ERP pour r√©cup√©rer les op√©rateurs r√©els
        query = '''
            SELECT TOP (1000) 
                [Coderessource],
                [Designation1]
            FROM [SEDI_ERP].[dbo].[RESSOURC]
            WHERE [Typeressource] = 'O'
            ORDER BY [Coderessource]
        '''
        
        cursor.execute(query)
        operateurs = cursor.fetchall()
        
        # Conversion en liste de dictionnaires
        result = []
        for row in operateurs:
            result.append({
                'operateur': row[0],  # CodeRessource
                'nom': row[1]         # Designation
            })
        
        conn.close()
        return jsonify({'operateurs': result, 'success': True})
        
    except Exception as e:
        return jsonify({'error': str(e), 'success': False}), 500

@app.route('/api/operateurs-badges', methods=['GET'])
def get_operateurs_badges():
    """R√©cup√®re tous les op√©rateurs qui ont badg√© aujourd'hui (avec sessions actives)"""
    try:
        conn = get_db_connection()
        if not conn:
            return jsonify({'error': 'Impossible de se connecter √† la base de donn√©es', 'success': False}), 500
        
        cursor = conn.cursor()
        
        # Requ√™te pour r√©cup√©rer les op√©rateurs avec sessions actives depuis SEDI_ERP
        query = f'''
            SELECT DISTINCT 
                t.Ident,
                r.Designation1,
                COUNT(*) as NombreSessions,
                MAX(t.DateCreation) as DerniereActivite,
                t.Statut
            FROM {CURRENT_TABLES['sessions']} t
            LEFT JOIN [SEDI_ERP].[dbo].[RESSOURC] r ON t.Ident = r.Coderessource
            WHERE CAST(t.DateDebut AS DATE) = CAST(GETDATE() AS DATE)
            GROUP BY t.Ident, r.Designation1, t.Statut
            ORDER BY MAX(t.DateCreation) DESC
        '''
        
        cursor.execute(query)
        operateurs_badges = cursor.fetchall()
        
        # Conversion en liste de dictionnaires
        result = []
        for row in operateurs_badges:
            result.append({
                'operateur': row[0],
                'nom': row[1] if row[1] else 'Nom non trouv√©',
                'nombre_sessions': row[2],
                'derniere_activite': row[3].isoformat() if row[3] else None,
                'statut': row[4]
            })
        
        conn.close()
        return jsonify({'operateurs_badges': result, 'success': True})
        
    except Exception as e:
        return jsonify({'error': str(e), 'success': False}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Point de terminaison pour v√©rifier que l'API fonctionne"""
    db_status = "Connect√©" if test_connection() else "Non connect√©"
    return jsonify({
        'status': 'OK', 
        'message': 'API fonctionnelle',
        'database': db_status,
        'server': DB_CONFIG['server']
    })

@app.route('/api/test-connection', methods=['GET'])
def test_db_connection():
    """Teste la connexion √† la base de donn√©es"""
    if test_connection():
        return jsonify({'success': True, 'message': 'Connexion √† SQL Server r√©ussie'})
    else:
        return jsonify({'success': False, 'message': '√âchec de la connexion √† SQL Server'}), 500

@app.route('/api/test-ressourc', methods=['GET'])
def test_ressourc_table():
    """Teste l'acc√®s √† la table RESSOURC"""
    try:
        conn = get_db_connection()
        if not conn:
            return jsonify({'success': False, 'error': 'Impossible de se connecter √† la base de donn√©es'}), 500
        
        cursor = conn.cursor()
        
        # Test d'acc√®s direct √† la table RESSOURC dans SEDI_ERP
        query = '''
            SELECT TOP 5 [Coderessource], [Designation1] 
            FROM [SEDI_ERP].[dbo].[RESSOURC]
            WHERE [Typeressource] = 'O'
        '''
        
        cursor.execute(query)
        result = cursor.fetchall()
        
        conn.close()
        
        return jsonify({
            'success': True, 
            'message': f'Table RESSOURC accessible, {len(result)} op√©rateurs trouv√©s',
            'sample_data': [{'code': row[0], 'nom': row[1]} for row in result]
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/test-permissions', methods=['GET'])
def test_permissions():
    """Teste les permissions sur les tables"""
    try:
        conn = get_db_connection()
        if not conn:
            return jsonify({'success': False, 'error': 'Impossible de se connecter √† la base de donn√©es'}), 500
        
        cursor = conn.cursor()
        
        # Test de lecture sur abetemps_temp
        try:
            cursor.execute("SELECT TOP 1 * FROM [SEDI_ERP].[GPSQL].[abetemps_temp]")
            read_ok = True
        except Exception as e:
            read_ok = False
            read_error = str(e)
        
        # Test d'√©criture sur abetemps_temp (simulation)
        try:
            cursor.execute("SELECT COUNT(*) FROM [SEDI_ERP].[GPSQL].[abetemps_temp]")
            write_ok = True
        except Exception as e:
            write_ok = False
            write_error = str(e)
        
        conn.close()
        
        return jsonify({
            'success': True,
            'permissions': {
                'read_abetemps_temp': read_ok,
                'write_abetemps_temp': write_ok,
                'read_error': read_error if not read_ok else None,
                'write_error': write_error if not write_ok else None
            }
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/terminer-travail', methods=['POST'])
def terminer_travail():
    """Termine le travail et enregistre dans ABHISTORIQUE_OPERATEURS"""
    try:
        from flask import request
        data = request.get_json()
        
        # Validation des donn√©es
        required_fields = ['operateurId', 'operateurNom', 'codeLancement', 'dateTravail']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'success': False, 'error': f'Champ requis manquant: {field}'}), 400
        
        # V√©rifier et cr√©er les tables si n√©cessaire
        if not ensure_tables_exist():
            return jsonify({'success': False, 'error': 'Impossible de cr√©er les tables n√©cessaires'}), 500
        
        # Mode simulation
        if USING_SIMULATION:
            from datetime import datetime
            import time
            
            # Cr√©er un enregistrement simul√©
            record = {
                'noEnreg': int(time.time()),
                'ident': data['operateurId'],
                'dateTravail': datetime.fromisoformat(data['dateTravail'].replace('Z', '+00:00')),
                'codeLanctImprod': data['codeLancement'],
                'phase': data['phase'],
                'codeRubrique': data.get('codeRubrique', ''),
                'varNumUtil8': data.get('tempsMinutes', 0),
                'varNumUtil9': data.get('tempsSecondes', 0),
                'statut': 'TERMINE',
                'dateCreation': datetime.now()
            }
            
            SIMULATION_DATA['historique'].append(record)
            
            print(f"üé≠ SIMULATION - Travail termin√©: {record}")
            
            return jsonify({
                'success': True, 
                'message': 'Travail termin√© - Donn√©es simul√©es en m√©moire',
                'noEnreg': record['noEnreg']
            })
        
        # Mode normal avec base de donn√©es
        # Utiliser la connexion appropri√©e
        if USING_FALLBACK:
            conn = get_fallback_db_connection()
        else:
            conn = get_app_db_connection()
            
        if not conn:
            return jsonify({'success': False, 'error': 'Impossible de se connecter √† la base de donn√©es de l\'application'}), 500
        
        cursor = conn.cursor()
        
        # Insertion dans ABHISTORIQUE_OPERATEURS (op√©rations termin√©es)
        query = f'''
            INSERT INTO {CURRENT_TABLES['historique']} 
            (Ident, DateTravail, CodeLanctImprod, Phase, CodeRubrique, VarNumUtil8, VarNumUtil9, Statut)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        '''
        
        # Conversion de la date
        from datetime import datetime
        date_travail = datetime.fromisoformat(data['dateTravail'].replace('Z', '+00:00'))
        
        temps_minutes = data.get('tempsMinutes', 0)
        temps_secondes = data.get('tempsSecondes', 0)
        
        cursor.execute(query, (
            data['operateurId'],
            date_travail,
            data['codeLancement'],
            data['phase'],
            data.get('codeRubrique', ''),
            temps_minutes,
            temps_secondes,
            'TERMINE'  # Statut pour indiquer que c'est termin√©
        ))
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True, 
            'message': 'Travail termin√© - Donn√©es enregistr√©es dans ABHISTORIQUE_OPERATEURS',
            'noEnreg': cursor.rowcount
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/demarrer-travail', methods=['POST'])
def demarrer_travail():
    """D√©marre le travail et enregistre dans ABTEMPS_OPERATEURS"""
    try:
        from flask import request
        data = request.get_json()
        
        # Validation des donn√©es
        required_fields = ['operateurId', 'operateurNom', 'codeLancement', 'dateTravail']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'success': False, 'error': f'Champ requis manquant: {field}'}), 400
        
        # V√©rifier et cr√©er les tables si n√©cessaire
        if not ensure_tables_exist():
            return jsonify({'success': False, 'error': 'Impossible de cr√©er les tables n√©cessaires'}), 500
        
        # Mode simulation
        if USING_SIMULATION:
            from datetime import datetime
            import time
            
            # Cr√©er un enregistrement simul√©
            record = {
                'noEnreg': int(time.time()),
                'ident': data['operateurId'],
                'dateTravail': datetime.fromisoformat(data['dateTravail'].replace('Z', '+00:00')),
                'codeLanctImprod': data['codeLancement'],
                'phase': data['phase'],
                'codeRubrique': data.get('codeRubrique', ''),
                'varNumUtil8': 0,
                'varNumUtil9': 0,
                'statut': 'EN_COURS',
                'dateCreation': datetime.now()
            }
            
            SIMULATION_DATA['temps_travail'].append(record)
            
            print(f"üé≠ SIMULATION - Travail d√©marr√©: {record}")
            
            return jsonify({
                'success': True, 
                'message': 'Travail d√©marr√© - Donn√©es simul√©es en m√©moire',
                'noEnreg': record['noEnreg']
            })
        
        # Mode normal avec base de donn√©es
        # Utiliser la connexion appropri√©e
        if USING_FALLBACK:
            conn = get_fallback_db_connection()
        else:
            conn = get_app_db_connection()
            
        if not conn:
            return jsonify({'success': False, 'error': 'Impossible de se connecter √† la base de donn√©es de l\'application'}), 500
        
        cursor = conn.cursor()
        
        # Insertion dans ABTEMPS_OPERATEURS (op√©rations commenc√©es)
        query = f'''
            INSERT INTO {CURRENT_TABLES['temps_travail']} 
            (Ident, DateTravail, CodeLanctImprod, Phase, CodeRubrique, VarNumUtil8, VarNumUtil9, Statut)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        '''
        
        # Conversion de la date
        from datetime import datetime
        date_travail = datetime.fromisoformat(data['dateTravail'].replace('Z', '+00:00'))
        
        cursor.execute(query, (
            data['operateurId'],
            date_travail,
            data['codeLancement'],
            data['phase'],
            data.get('codeRubrique', ''),
            0,  # Temps initial √† 0
            0,  # Temps initial √† 0
            'EN_COURS'  # Statut pour indiquer que c'est commenc√©
        ))
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True, 
            'message': 'Travail d√©marr√© - Donn√©es enregistr√©es dans ABTEMPS_OPERATEURS',
            'noEnreg': cursor.rowcount
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/historique-operateur/<operateur_id>', methods=['GET'])
def get_historique_operateur(operateur_id):
    """R√©cup√®re l'historique des enregistrements d'un op√©rateur"""
    try:
        # V√©rifier et cr√©er les tables si n√©cessaire
        if not ensure_tables_exist():
            return jsonify({'success': False, 'error': 'Impossible de cr√©er les tables n√©cessaires'}), 500
        
        # Mode simulation
        if USING_SIMULATION:
            # Filtrer les donn√©es simul√©es pour l'op√©rateur
            result = []
            for record in SIMULATION_DATA['historique']:
                if record['ident'] == operateur_id:
                    result.append({
                        'noEnreg': record['noEnreg'],
                        'ident': record['ident'],
                        'dateTravail': record['dateTravail'].isoformat() if record['dateTravail'] else None,
                        'codeLanctImprod': record['codeLanctImprod'],
                        'phase': record['phase'],
                        'codeRubrique': record['codeRubrique'],
                        'varNumUtil8': record['varNumUtil8'],
                        'varNumUtil9': record['varNumUtil9'],
                        'statut': record['statut'],
                        'dateCreation': record['dateCreation'].isoformat() if record['dateCreation'] else None
                    })
            
            # Trier par date d√©croissante
            result.sort(key=lambda x: x['dateTravail'], reverse=True)
            
            return jsonify({'success': True, 'enregistrements': result})
        
        # Mode normal avec base de donn√©es
        # Utiliser la connexion appropri√©e
        if USING_FALLBACK:
            conn = get_fallback_db_connection()
        else:
            conn = get_app_db_connection()
            
        if not conn:
            return jsonify({'success': False, 'error': 'Impossible de se connecter √† la base de donn√©es de l\'application'}), 500
        
        cursor = conn.cursor()
        
        # R√©cup√©ration de l'historique depuis ABHISTORIQUE_OPERATEURS
        query = f'''
            SELECT TOP (1000) 
                NoEnreg, Ident, DateTravail, CodeLanctImprod, Phase, CodeRubrique,
                VarNumUtil8, VarNumUtil9, Statut, DateCreation
            FROM {CURRENT_TABLES['historique']}
            WHERE Ident = ?
            ORDER BY DateTravail DESC
        '''
        
        cursor.execute(query, (operateur_id,))
        enregistrements = cursor.fetchall()
        
        # Conversion en liste de dictionnaires
        result = []
        for row in enregistrements:
            result.append({
                'noEnreg': row[0],
                'ident': row[1],
                'dateTravail': row[2].isoformat() if row[2] else None,
                'codeLanctImprod': row[3],
                'phase': row[4],
                'codeRubrique': row[5],
                'varNumUtil8': row[6],
                'varNumUtil9': row[7],
                'statut': row[8],
                'dateCreation': row[9].isoformat() if row[9] else None
            })
        
        conn.close()
        return jsonify({'success': True, 'enregistrements': result})
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/ltc-data/<code_lancement>', methods=['GET'])
def get_ltc_data(code_lancement):
    """R√©cup√®re les donn√©es LTC pour un code lancement donn√©"""
    try:
        conn = get_db_connection()
        if not conn:
            return jsonify({'success': False, 'error': 'Impossible de se connecter √† la base de donn√©es'}), 500
        
        cursor = conn.cursor()
        
        # R√©cup√©ration des donn√©es LTC depuis SEDI_ERP (table LCTC r√©elle)
        query = '''
            SELECT TOP 1 
                [CodeLanct], [Phase], [CodeRubrique]
            FROM [SEDI_ERP].[dbo].[LCTC]
            WHERE [CodeLanct] = ?
            ORDER BY [CodeLanct] DESC
        '''
        
        cursor.execute(query, (code_lancement,))
        row = cursor.fetchone()
        
        if row:
            ltc_data = {
                'codeLancement': row[0],
                'phase': row[1],
                'codeRubrique': row[2]
            }
            conn.close()
            return jsonify({'success': True, 'ltcData': ltc_data})
        else:
            conn.close()
            return jsonify({'success': False, 'error': f'Code lancement {code_lancement} non trouv√©'}), 404
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/export-to-erp', methods=['POST'])
def export_to_erp():
    """Exporte les donn√©es vers l'ERP SILOG"""
    try:
        if export_data_to_erp():
            return jsonify({
                'success': True,
                'message': 'Donn√©es export√©es vers l\'ERP avec succ√®s'
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Erreur lors de l\'export vers l\'ERP'
            }), 500
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/database-stats', methods=['GET'])
def get_database_statistics():
    """R√©cup√®re les statistiques de la base de donn√©es autonome"""
    try:
        stats = get_database_stats()
        if stats:
            return jsonify({
                'success': True,
                'stats': stats
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Impossible de r√©cup√©rer les statistiques'
            }), 500
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

if __name__ == '__main__':
    print("=== Configuration SQL Server ===")
    print(f"Serveur: {DB_CONFIG['server']}")
    print(f"Utilisateur: {DB_CONFIG['username']}")
    print(f"Base de donn√©es: {DB_CONFIG['database']}")
    print("================================")
    
    # Test de connexion au d√©marrage
    if test_connection():
        print("‚úÖ Connexion √† SQL Server r√©ussie")
        
        # Cr√©ation de la base de donn√©es SEDI_APP si n√©cessaire
        print("üîß V√©rification/Cr√©ation de la base de donn√©es SEDI_APP...")
        if create_app_database():
            print("‚úÖ Base de donn√©es SEDI_APP pr√™te")
        else:
            print("‚ö†Ô∏è Probl√®me avec la base de donn√©es SEDI_APP (utilisation du fallback)")
        
        # Cr√©ation des tables de l'application si n√©cessaire
        print("üîß V√©rification/Cr√©ation des tables de l'application...")
        if create_app_tables():
            print("‚úÖ Tables de l'application pr√™tes")
        else:
            print("‚ö†Ô∏è Probl√®me avec les tables de l'application (l'application peut continuer)")
        
        print(f"API disponible sur http://{FLASK_CONFIG['host']}:{FLASK_CONFIG['port']}")
        app.run(**FLASK_CONFIG)
    else:
        print("‚ùå √âchec de la connexion √† SQL Server")
        print("V√©rifiez que:")
        print("1. Le serveur SERVEURERP est accessible")
        print("2. Les identifiants QUALITE/QUALITE sont corrects")
        print("3. Le driver ODBC est install√©")
        print("4. Le pare-feu autorise la connexion")
        print("5. SQL Server accepte les connexions TCP/IP")
    
    print(f"API disponible sur http://{FLASK_CONFIG['host']}:{FLASK_CONFIG['port']}")
    app.run(
        debug=FLASK_CONFIG['debug'], 
        host=FLASK_CONFIG['host'], 
        port=FLASK_CONFIG['port']
    ) 